{"remainingRequest":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/daniel/Documentos/testefrontes3/ES3/front/src/mk_admin/components/NotificationPlugin/Notification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/src/mk_admin/components/NotificationPlugin/Notification.vue","mtime":1541807359636},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/cache-loader/dist/cjs.js","mtime":1541803797564},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/babel-loader/lib/index.js","mtime":1541803796996},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/cache-loader/dist/cjs.js","mtime":1541803797564},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/vue-loader/lib/index.js","mtime":1541803800929}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'notification',\n  props: {\n    message: String,\n    icon: String,\n    verticalAlign: {\n      type: String,\n      default: 'top'\n    },\n    horizontalAlign: {\n      type: String,\n      default: 'center'\n    },\n    type: {\n      type: String,\n      default: 'info'\n    },\n    timeout: {\n      type: Number,\n      default: 2500\n    },\n    timestamp: {\n      type: Date,\n      default: () => new Date()\n    }\n  },\n  data () {\n    return {\n      elmHeight: 0\n    }\n  },\n  computed: {\n    hasIcon () {\n      return this.icon && this.icon.length > 0\n    },\n    alertType () {\n      return `alert-${this.type}`\n    },\n    customPosition () {\n      let initialMargin = 20\n      let alertHeight = this.elmHeight + 10\n      let sameAlertsCount = this.$notifications.state.filter((alert) => {\n        return alert.horizontalAlign === this.horizontalAlign && alert.verticalAlign === this.verticalAlign && alert.timestamp <= this.timestamp\n      }).length\n      let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin\n      let styles = {}\n      if (this.verticalAlign === 'top') {\n        styles.top = `${pixels}px`\n      } else {\n        styles.bottom = `${pixels}px`\n      }\n      return styles\n    }\n  },\n  methods: {\n    close () {\n      this.$emit('on-close', this.timestamp)\n    }\n  },\n  mounted () {\n    this.elmHeight = this.$el.clientHeight\n    if (this.timeout) {\n      setTimeout(this.close, this.timeout)\n    }\n  }\n}\n\n",{"version":3,"sources":["Notification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Notification.vue","sourceRoot":"src/mk_admin/components/NotificationPlugin","sourcesContent":["<template>\n  <div\n    @click=\"close()\"\n    data-notify=\"container\"\n    class=\"alert open alert-with-icon\"\n    role=\"alert\"\n    :class=\"[verticalAlign, horizontalAlign, alertType]\"\n    :style=\"customPosition\"\n    data-notify-position=\"top-center\">\n    <button\n      type=\"button\"\n      aria-hidden=\"true\"\n      class=\"close\"\n      data-notify=\"dismiss\"\n      @click=\"close\">Ã—\n    </button>\n    <i data-notify=\"icon\" class=\"material-icons\">{{icon}}</i>\n    <span data-notify=\"message\" v-html=\"message\"></span>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'notification',\n  props: {\n    message: String,\n    icon: String,\n    verticalAlign: {\n      type: String,\n      default: 'top'\n    },\n    horizontalAlign: {\n      type: String,\n      default: 'center'\n    },\n    type: {\n      type: String,\n      default: 'info'\n    },\n    timeout: {\n      type: Number,\n      default: 2500\n    },\n    timestamp: {\n      type: Date,\n      default: () => new Date()\n    }\n  },\n  data () {\n    return {\n      elmHeight: 0\n    }\n  },\n  computed: {\n    hasIcon () {\n      return this.icon && this.icon.length > 0\n    },\n    alertType () {\n      return `alert-${this.type}`\n    },\n    customPosition () {\n      let initialMargin = 20\n      let alertHeight = this.elmHeight + 10\n      let sameAlertsCount = this.$notifications.state.filter((alert) => {\n        return alert.horizontalAlign === this.horizontalAlign && alert.verticalAlign === this.verticalAlign && alert.timestamp <= this.timestamp\n      }).length\n      let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin\n      let styles = {}\n      if (this.verticalAlign === 'top') {\n        styles.top = `${pixels}px`\n      } else {\n        styles.bottom = `${pixels}px`\n      }\n      return styles\n    }\n  },\n  methods: {\n    close () {\n      this.$emit('on-close', this.timestamp)\n    }\n  },\n  mounted () {\n    this.elmHeight = this.$el.clientHeight\n    if (this.timeout) {\n      setTimeout(this.close, this.timeout)\n    }\n  }\n}\n\n</script>\n<style lang=\"scss\" scoped>\n  @media screen and (max-width: 991px){\n    .alert{\n      width: auto !important;\n      margin: 0 10px;\n\n      &.left {\n        left: 0 !important;\n      }\n      &.right {\n        right: 0 !important;\n      }\n      &.center{\n        margin: 0 10px !important;\n      }\n    }\n  }\n\n  .alert {\n    z-index: 100;\n    cursor: pointer;\n    position: absolute;\n    width: 41%;\n\n    &.center {\n      left: 0;\n      right: 0;\n      margin-left: auto;\n      margin-right: auto;\n      margin: 0 auto;\n\n    }\n    &.left {\n      left: 20px;\n    }\n    &.right {\n      right: 20px;\n    }\n\n  }\n\n</style>\n"]}]}