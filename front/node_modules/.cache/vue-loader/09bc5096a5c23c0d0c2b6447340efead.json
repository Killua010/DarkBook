{"remainingRequest":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/daniel/Documentos/testefrontes3/ES3/front/src/mk_admin/components/Cards/ChartCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/src/mk_admin/components/Cards/ChartCard.vue","mtime":1541807359620},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/cache-loader/dist/cjs.js","mtime":1541803797564},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/babel-loader/lib/index.js","mtime":1541803796996},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/cache-loader/dist/cjs.js","mtime":1541803797564},{"path":"/home/daniel/Documentos/testefrontes3/ES3/front/node_modules/vue-loader/lib/index.js","mtime":1541803800929}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'chart-card',\n  props: {\n    footerText: {\n      type: String,\n      default: ''\n    },\n    headerTitle: {\n      type: String,\n      default: 'Chart title'\n    },\n    chartType: {\n      type: String,\n      default: 'Line' // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: () => {\n        return []\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        }\n      }\n    },\n    dataBackgroundColor: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      chartId: 'no-id'\n    }\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart () {\n      var chartIdQuery = `#${this.chartId}`\n      this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions)\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId () {\n      var currentTime = new Date().getTime().toString()\n      var randomInt = this.getRandomInt(0, currentTime)\n      this.chartId = `div_${randomInt}`\n    },\n    getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min\n    }\n  },\n  mounted () {\n    this.updateChartId()\n    this.$nextTick(this.initChart)\n  }\n}\n",{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChartCard.vue","sourceRoot":"src/mk_admin/components/Cards","sourcesContent":["<template>\n  <md-card>\n    <md-card-header class=\"card-chart\" :data-background-color=\"dataBackgroundColor\">\n      <div :id=\"chartId\" class=\"ct-chart\"></div>\n    </md-card-header>\n\n    <md-card-content>\n      <slot name=\"content\"></slot>\n    </md-card-content>\n\n    <md-card-actions md-alignment=\"left\">\n      <slot name=\"footer\"></slot>\n    </md-card-actions>\n  </md-card>\n</template>\n<script>\nexport default {\n  name: 'chart-card',\n  props: {\n    footerText: {\n      type: String,\n      default: ''\n    },\n    headerTitle: {\n      type: String,\n      default: 'Chart title'\n    },\n    chartType: {\n      type: String,\n      default: 'Line' // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: () => {\n        return []\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        }\n      }\n    },\n    dataBackgroundColor: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      chartId: 'no-id'\n    }\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart () {\n      var chartIdQuery = `#${this.chartId}`\n      this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions)\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId () {\n      var currentTime = new Date().getTime().toString()\n      var randomInt = this.getRandomInt(0, currentTime)\n      this.chartId = `div_${randomInt}`\n    },\n    getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min\n    }\n  },\n  mounted () {\n    this.updateChartId()\n    this.$nextTick(this.initChart)\n  }\n}\n</script>\n"]}]}